package com.example.anonymous.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bc.juhaohd.com.bean.GdAttrBeanList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GD_ATTR_BEAN_LIST".
*/
public class GdAttrBeanListDao extends AbstractDao<GdAttrBeanList, Long> {

    public static final String TABLENAME = "GD_ATTR_BEAN_LIST";

    /**
     * Properties of entity GdAttrBeanList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Alid = new Property(0, Long.class, "alid", true, "_id");
        public final static Property Attr_value = new Property(1, String.class, "attr_value", false, "ATTR_VALUE");
        public final static Property Id = new Property(2, int.class, "id", false, "ID");
        public final static Property Attr_bean_index = new Property(3, int.class, "attr_bean_index", false, "ATTR_BEAN_INDEX");
    };


    public GdAttrBeanListDao(DaoConfig config) {
        super(config);
    }
    
    public GdAttrBeanListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GD_ATTR_BEAN_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: alid
                "\"ATTR_VALUE\" TEXT," + // 1: attr_value
                "\"ID\" INTEGER NOT NULL ," + // 2: id
                "\"ATTR_BEAN_INDEX\" INTEGER NOT NULL );"); // 3: attr_bean_index
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GD_ATTR_BEAN_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GdAttrBeanList entity) {
        stmt.clearBindings();
 
        Long alid = entity.getAlid();
        if (alid != null) {
            stmt.bindLong(1, alid);
        }
 
        String attr_value = entity.getAttr_value();
        if (attr_value != null) {
            stmt.bindString(2, attr_value);
        }
        stmt.bindLong(3, entity.getId());
        stmt.bindLong(4, entity.getAttr_bean_index());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GdAttrBeanList entity) {
        stmt.clearBindings();
 
        Long alid = entity.getAlid();
        if (alid != null) {
            stmt.bindLong(1, alid);
        }
 
        String attr_value = entity.getAttr_value();
        if (attr_value != null) {
            stmt.bindString(2, attr_value);
        }
        stmt.bindLong(3, entity.getId());
        stmt.bindLong(4, entity.getAttr_bean_index());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GdAttrBeanList readEntity(Cursor cursor, int offset) {
        GdAttrBeanList entity = new GdAttrBeanList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // alid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // attr_value
            cursor.getInt(offset + 2), // id
            cursor.getInt(offset + 3) // attr_bean_index
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GdAttrBeanList entity, int offset) {
        entity.setAlid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAttr_value(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
        entity.setAttr_bean_index(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GdAttrBeanList entity, long rowId) {
        entity.setAlid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GdAttrBeanList entity) {
        if(entity != null) {
            return entity.getAlid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
