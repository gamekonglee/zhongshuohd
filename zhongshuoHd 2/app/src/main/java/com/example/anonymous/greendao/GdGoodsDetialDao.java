package com.example.anonymous.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bc.juhaohd.com.bean.GdGoodsDetial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GD_GOODS_DETIAL".
*/
public class GdGoodsDetialDao extends AbstractDao<GdGoodsDetial, Long> {

    public static final String TABLENAME = "GD_GOODS_DETIAL";

    /**
     * Properties of entity GdGoodsDetial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GdId = new Property(0, Long.class, "gdId", true, "_id");
        public final static Property GdJson = new Property(1, String.class, "GdJson", false, "GD_JSON");
        public final static Property Id = new Property(2, int.class, "id", false, "ID");
    };


    public GdGoodsDetialDao(DaoConfig config) {
        super(config);
    }
    
    public GdGoodsDetialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GD_GOODS_DETIAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: gdId
                "\"GD_JSON\" TEXT," + // 1: GdJson
                "\"ID\" INTEGER NOT NULL );"); // 2: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GD_GOODS_DETIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GdGoodsDetial entity) {
        stmt.clearBindings();
 
        Long gdId = entity.getGdId();
        if (gdId != null) {
            stmt.bindLong(1, gdId);
        }
 
        String GdJson = entity.getGdJson();
        if (GdJson != null) {
            stmt.bindString(2, GdJson);
        }
        stmt.bindLong(3, entity.getId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GdGoodsDetial entity) {
        stmt.clearBindings();
 
        Long gdId = entity.getGdId();
        if (gdId != null) {
            stmt.bindLong(1, gdId);
        }
 
        String GdJson = entity.getGdJson();
        if (GdJson != null) {
            stmt.bindString(2, GdJson);
        }
        stmt.bindLong(3, entity.getId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GdGoodsDetial readEntity(Cursor cursor, int offset) {
        GdGoodsDetial entity = new GdGoodsDetial( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gdId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GdJson
            cursor.getInt(offset + 2) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GdGoodsDetial entity, int offset) {
        entity.setGdId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGdJson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GdGoodsDetial entity, long rowId) {
        entity.setGdId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GdGoodsDetial entity) {
        if(entity != null) {
            return entity.getGdId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
